map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
	'' 'registry/2.0';
}

upstream portus {
	least_conn;
	server 192.168.108.68:3000 max_fails=3 fail_timeout=15s;
}

upstream registry {
	least_conn;
	server 192.168.108.68:5000 max_fails=3 fail_timeout=15s;
}

server {
    listen 80;
    server_name hub666.infervision.com;

    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }

    ##
    # Docker-specific stuff.

    proxy_set_header Host $http_host;   # required for Docker client sake
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Scheme $scheme;

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    # required to avoid HTTP 411: see Issue #1486
    # (https://github.com/docker/docker/issues/1486)
    chunked_transfer_encoding on;

    ##
    # Custom headers.

    # Adding HSTS[1] (HTTP Strict Transport Security) to avoid SSL stripping[2].
    #
    # [1] https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # [2] https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    # Don't allow the browser to render the page inside a frame or iframe
    # and avoid Clickjacking. More in the following link:
    #
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options DENY;

    # Disable content-type sniffing on some browsers.
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into
    # most recent web browsers. It's usually enabled by default anyway, so the
    # role of this header is to re-enable the filter for this particular
    # website if it was disabled by the user.
    add_header X-XSS-Protection "1; mode=block";

    # Add header for IE in compatibility mode.
    add_header X-UA-Compatible "IE=edge";

    access_log /var/log/nginx/hub-access.log main;
    error_log /var/log/nginx/hub-error.log;

	# Redirect (most) requests to /v2/* to the Docker Registry
	location /v2/ {
	  # Do not allow connections from docker 1.5 and earlier
	  # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
	  if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
       return 404;
      }

      ## If $docker_distribution_api_version is empty, the header will not be added.
      ## See the map directive above where this variable is defined.
      add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

      proxy_pass https://192.168.108.68:5000;
      proxy_set_header Host $http_host;   # required for docker client's sake
      proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 900;
      proxy_buffering off;
	client_max_body_size 0;
	proxy_http_version 1.1;
	proxy_request_buffering off;
	}
	# Portus needs to handle /v2/token for authentication
	location = /v2/token {
      proxy_pass https://192.168.108.68:3000;
      proxy_set_header Host $http_host;   # required for docker client's sake
      proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 900;
      proxy_buffering off;
    }
	# Portus needs to handle /v2/webhooks/events for notifications
	location = /v2/webhooks/events {
      proxy_pass https://192.168.108.68:3000;
      proxy_set_header Host $http_host;   # required for docker client's sake
      proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 900;
      proxy_buffering off;
    }

    location / {
      proxy_pass https://192.168.108.68:3000;
      proxy_set_header Host $http_host;   # required for docker client's sake
      proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 900;
      proxy_buffering off;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/stage/fullchain.cer;   #将domain name.pem替换成您证书的文件名。
    ssl_certificate_key /etc/letsencrypt/stage/*.infervision.com.key;   #将domain name.key替换成您证书的密钥文件名。


    # Redirect non-https traffic to https
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # } # managed by Certbot

}
